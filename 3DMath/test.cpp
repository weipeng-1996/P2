#include"test.h"
using namespace MathTest;

namespace MathTest{

void test1( )
{
	// 求交
	//2D AABB
	//线段在AABB内部
	cout<<"-----------------------------------2D AABB 线段相交-----------------------------------------"<<endl<<endl;
	cout<<"-----------------------------------线段在AABB内部-----------------------------------------"<<endl;
	Vector2 a( 0.0f, 0.0f );
	Vector2 b( 1.0f, -1.0f );
	AABB< Vector2 > aabb( Vector2( -5.0f, -5.0f ), Vector2( 10.0f, 5.0f ) );
	
	Vector2 c;
	Vector2 d;
	if ( aabb.intersect( a, b, &c, &d ) )
		cout<<c<<d;
	else
		cout<<"不相交"<<endl;
	//线段在AABB外部
	cout<<"-----------------------------------线段在AABB外部-----------------------------------------"<<endl;
	Vector2 e( 10.0f, 6.0f );
	Vector2 f( -6.0f, 8.0f );
	if ( aabb.intersect( e, f, &c, &d ) )
		cout<<c<<d;
	else
		cout<<"不相交"<<endl;
	//线段与AABB一个顶点重合
	cout<<"-----------------------------------线段与AABB一个顶点重合-----------------------------------------"<<endl;
	Vector2 g( 10.0f, 5.0f );
	Vector2 h( -6.0f, 8.0f );
	if ( aabb.intersect( g, h, &c, &d ) )
		cout<<c<<d;
	else
		cout<<"不相交"<<endl;
	//线段与AABB有两个交点
	cout<<"-----------------------------------线段与AABB有两个交点-----------------------------------------"<<endl;
	Vector2 m( 5.0f, 10.0f );
	Vector2 n( -5.0f, -10.0f );
	if ( aabb.intersect( m, n, &c, &d ) )
		cout<<c<<d;
	else
		cout<<"不相交"<<endl;
	//线段与AABB一条边重合
	cout<<"-----------------------------------线段与AABB一条边重合-----------------------------------------"<<endl;
	Vector2 mm( -6.0f, -5.0f );
	Vector2 nn( 11.0f, -5.0f );
	if ( aabb.intersect( mm, nn, &c, &d ) )
		cout<<c<<d;
	else
		cout<<"不相交"<<endl;

	cout<<endl<<"-----------------------------------3D AABB 线段相交-----------------------------------------"<<endl<<endl;
	//3D AABB
	cout<<"-----------------------------------线段平行于Y轴与AABB有2个交点相交-----------------------------------------"<<endl;
	AABB< Vector3 > aabb3( Vector3( 4.0f, 0.0f, 4.0f ), Vector3( 8.0f, 4.0f, 8.0f ) );
	Vector3 p1( 6.0f, 6.0f, 6.0f ), p2( 6.0f, -1.0f, 6.0f);
	Vector3 p3, p4;
	if ( aabb3.intersect( p1, p2, &p3, &p4) )
		cout<<p3<<p4;
	else
		cout<<"不相交"<<endl;

	cout<<"-----------------------------------线段平行于Y轴与AABB有1个交点相交-----------------------------------------"<<endl;
	Vector3 p5( 6.0f, 6.0f, 6.0f ), p6( 6.0f, 1.0f, 6.0f);
	Vector3 t1, t2;
	if ( aabb3.intersect( p6, p5, &t1, &t2 ) )
		cout<<t1<<t2;
	else
		cout<<"不相交"<<endl;
	cout<<"-----------------------------------线段平行于Y轴在AABB内-----------------------------------------"<<endl;
	Vector3 p7( 6.0f, 3.0f, 6.0f ), p8( 6.0f, 1.0f, 6.0f);
	Vector3 t3, t4;
	if ( aabb3.intersect( p8, p7, &t3, &t4 ) )
		cout<<t3<<t4;
	else
		cout<<"不相交"<<endl;
	cout<<"-----------------------------------线段平行于Y轴不与AABB相交-----------------------------------------"<<endl;
	Vector3 p9( 1.0f, 3.0f, 5.0f ), p10( -1.0f, 8.0f, 2.0f);
	Vector3 t5, t6;
	if ( aabb3.intersect( p9, p10, &t5, &t6 ) )
		cout<<t5<<t6;
	else
		cout<<"不相交"<<endl;
	cout<<"-----------------------------------线段穿过AABB的1个顶点-----------------------------------------"<<endl;
	Vector3 p11( 3.0f, 1.0f, 7.0f ), p12( 4.0f, 4.0f, 8.0f);
	Vector3 t7, t8;
	if ( aabb3.intersect( p11, p12, &t7, &t8 ) )
		cout<<t7<<t8;
	else
		cout<<"不相交"<<endl;
	cout<<"-----------------------------------线段在AABB的上表面-----------------------------------------"<<endl;
	Vector3 p13( 6.0f, 6.0f, 8.0f ), p14( 4.0f, 0.0f, 8.0f);
	Vector3 t9, t10;
	if ( aabb3.intersect( p13, p14, &t9, &t10 ) )
		cout<<t9<<t10;
	else
		cout<<"不相交"<<endl;
	cout<<"-----------------------------------不平行坐标轴的线段与AABB相交-----------------------------------------"<<endl;
	Vector3 p15( 4.0f, 4.0f, 8.0f ), p16( 8.0f, 0.0f, 4.0f);
	Vector3 t11, t12;
	if ( aabb3.intersect( p15, p16, &t11, &t12 ) )
		cout<<t11<<t12;
	else
		cout<<"不相交"<<endl;
}

void test2( )
{
	// 矩阵乘法
	cout<<endl<<"-----------------------------------矩阵变换测试-----------------------------------------"<<endl<<endl;
	Matrix mt;
	mt.translate( Vector3( 0.0f, 10.0f, 10.0f ) );
	Matrix mr;
	mr.rotate( Vector3( 0.0f, 0.0f, 1.0f ), Pi * 0.5f );
	Matrix ms;
	ms.scale( Vector3( 2.0f, 1.0f, 3.0f ) );
	Matrix mtr = mt * mr;
	Matrix mrt = mr * mt;

	// 定义空间中一个点
	Vector4 v( 1, 2, 3 );

	// TODO : 测试矩阵的所有操作
	
	Vector4 vt = mt * v;
	Vector4 vr = mr * v;
	Vector4 vs = ms * v;
	Vector4 vtr = mtr * v;
	Vector4 vrt = mrt * v;
	cout<<"-----------------------------------空间中初始点-----------------------------------------"<<endl;
	cout<<v;
	cout<<"-----------------------------------平移矩阵-----------------------------------------"<<endl;
	mt.print();
	cout<<"-----------------------------------平移后的点-----------------------------------------"<<endl;
	cout<<vt;
	cout<<"-----------------------------------旋转矩阵-----------------------------------------"<<endl;
	mr.print();
	cout<<"-----------------------------------旋转后的点-----------------------------------------"<<endl;
	cout<<vr;
	cout<<"-----------------------------------缩放矩阵-----------------------------------------"<<endl;
	ms.print();
	cout<<"-----------------------------------缩放后的点-----------------------------------------"<<endl;
	cout<<vs;
	cout<<"-----------------------------------先平移后旋转矩阵-----------------------------------------"<<endl;
	mtr.print();
	cout<<"-----------------------------------先平移后旋转后的点-----------------------------------------"<<endl;
	cout<<vtr;
	cout<<"-----------------------------------先旋转后平移矩阵-----------------------------------------"<<endl;
	mrt.print();
	cout<<"-----------------------------------先旋转后平移后的点-----------------------------------------"<<endl;
	cout<<vrt;
}

}

int main()
{
	test1( );
	test2( );
	system("pause");
}